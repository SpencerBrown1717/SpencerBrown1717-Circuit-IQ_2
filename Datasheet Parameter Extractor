import os
import re
import PyPDF2
import logging

# Simple logging setup
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger('CircuitIQ-Extractor')

class DatasheetExtractor:
    """
    Simplified DatasheetExtractor for Circuit IQ PCB Designer
    
    Extracts component parameters from datasheets in PDF format or text content.
    """
    
    def __init__(self):
        """Initialize the DatasheetExtractor with basic regex patterns"""
        # Component type detection keywords
        self.component_types = {
            'resistor': ['resistor', 'resistance', 'ohm'],
            'capacitor': ['capacitor', 'capacitance', 'farad', 'pF', 'nF', 'µF'],
            'inductor': ['inductor', 'inductance', 'henry', 'µH', 'mH'],
            'diode': ['diode', 'rectifier', 'schottky'],
            'LED': ['led', 'light emitting diode'],
            'transistor': ['transistor', 'bjt', 'fet', 'mosfet'],
            'microcontroller': ['microcontroller', 'mcu', 'processor'],
            'regulator': ['regulator', 'voltage regulator', 'ldo']
        }
    
    def extract_from_pdf(self, pdf_path):
        """Extract text content from a PDF datasheet"""
        text = ""
        try:
            with open(pdf_path, 'rb') as file:
                reader = PyPDF2.PdfReader(file)
                # Process first 10 pages max - usually contains the important info
                pages_to_process = min(len(reader.pages), 10)
                
                for page_num in range(pages_to_process):
                    text += reader.pages[page_num].extract_text() + "\n"
        except Exception as e:
            logger.error(f"Error extracting text from PDF: {e}")
        
        return text
    
    def extract_parameters(self, text):
        """Extract key component parameters from datasheet text"""
        parameters = {}
        
        # Determine component type
        component_type = self._determine_component_type(text)
        if component_type:
            parameters['type'] = component_type
        
        # Extract part number
        part_patterns = [
            r'(?i)Part Number:\s*([\w\d-]+)',
            r'(?i)P/N:\s*([\w\d-]+)',
            r'(?i)Model:\s*([\w\d-]+)'
        ]
        
        for pattern in part_patterns:
            match = re.search(pattern, text)
            if match:
                parameters['part_number'] = match.group(1).strip()
                break
        
        # Extract package type
        package_patterns = [
            r'(?i)Package:\s*([\w\d-]+)',
            r'(?i)Package Type:\s*([\w\d-]+)',
            r'(?i)Case:\s*([\w\d-]+)'
        ]
        
        for pattern in package_patterns:
            match = re.search(pattern, text)
            if match:
                parameters['package'] = match.group(1).strip()
                break
        
        # Extract pin count
        pin_patterns = [
            r'(?i)Pins:\s*(\d+)',
            r'(?i)Pin Count:\s*(\d+)',
            r'(?i)Number of Pins:\s*(\d+)'
        ]
        
        for pattern in pin_patterns:
            match = re.search(pattern, text)
            if match:
                parameters['pins'] = int(match.group(1))
                break
        
        # Extract voltage
        voltage_patterns = [
            r'(?i)Operating Voltage:\s*([\d\.]+)\s*(?:to|-)?\s*([\d\.]+)?\s*V',
            r'(?i)Supply Voltage:\s*([\d\.]+)\s*(?:to|-)?\s*([\d\.]+)?\s*V',
            r'(?i)Input Voltage:\s*([\d\.]+)\s*(?:to|-)?\s*([\d\.]+)?\s*V'
        ]
        
        for pattern in voltage_patterns:
            match = re.search(pattern, text)
            if match:
                if match.group(2):
                    parameters['voltage'] = f"{match.group(1)}V to {match.group(2)}V"
                else:
                    parameters['voltage'] = f"{match.group(1)}V"
                break
        
        # Extract current
        current_patterns = [
            r'(?i)Current:\s*([\d\.]+)\s*(?:mA|A)',
            r'(?i)Max Current:\s*([\d\.]+)\s*(?:mA|A)',
            r'(?i)Output Current:\s*([\d\.]+)\s*(?:mA|A)'
        ]
        
        for pattern in current_patterns:
            match = re.search(pattern, text)
            if match:
                # Determine if mA or A
                unit = "mA" if "mA" in match.group(0) else "A"
                parameters['current'] = f"{match.group(1)}{unit}"
                break
        
        # Extract temperature range
        temp_patterns = [
            r'(?i)Temperature:\s*([-\d\.]+)\s*(?:to|-)?\s*([-\d\.]+)?\s*°C',
            r'(?i)Operating Temp:\s*([-\d\.]+)\s*(?:to|-)?\s*([-\d\.]+)?\s*°C'
        ]
        
        for pattern in temp_patterns:
            match = re.search(pattern, text)
            if match:
                if match.group(2):
                    parameters['temperature'] = f"{match.group(1)}°C to {match.group(2)}°C"
                else:
                    parameters['temperature'] = f"{match.group(1)}°C"
                break
        
        return parameters
    
    def _determine_component_type(self, text):
        """Determine the type of component based on keywords in the text"""
        text_lower = text.lower()
        
        # Try to find an explicit type declaration
        type_patterns = [
            r'(?i)Type:\s*([\w\s-]+)',
            r'(?i)Component Type:\s*([\w\s-]+)'
        ]
        
        for pattern in type_patterns:
            match = re.search(pattern, text)
            if match:
                return match.group(1).strip()
        
        # Count keyword matches
        matched_types = []
        for comp_type, keywords in self.component_types.items():
            matches = sum(1 for keyword in keywords if keyword.lower() in text_lower)
            if matches > 0:
                matched_types.append((comp_type, matches))
        
        # Return the type with the most keyword matches
        if matched_types:
            return max(matched_types, key=lambda x: x[1])[0]
        
        return None
    
    def detect_component_connections(self, text):
        """Identify pin connections based on datasheet content"""
        connections = []
        
        # Match pin descriptions - look for "Pin X: Description" format
        pin_pattern = r'Pin\s*(\d+)[:\s]+([A-Za-z0-9_\s/]+)'
        pin_functions = re.findall(pin_pattern, text)
        
        # Also try alternative format "[Pin Name] (X): Description"
        alt_pattern = r'([A-Za-z0-9_]+)\s*\(?(\d+)\)?[:\s]+([A-Za-z0-9_\s/]+)'
        alt_functions = re.findall(alt_pattern, text)
        
        # Process standard pin format
        for pin_num, description in pin_functions:
            connections.append({
                'number': int(pin_num),
                'description': description.strip(),
                'category': self._categorize_pin(description)
            })
        
        # Process alternative pin format if standard format didn't find anything
        if not connections:
            for pin_name, pin_num, description in alt_functions:
                connections.append({
                    'number': int(pin_num),
                    'name': pin_name.strip(),
                    'description': description.strip(),
                    'category': self._categorize_pin(description)
                })
        
        # Sort connections by pin number
        connections.sort(key=lambda x: x['number'])
        
        # Group pins by category
        power_pins = [pin for pin in connections if pin['category'] == 'power']
        ground_pins = [pin for pin in connections if pin['category'] == 'ground']
        io_pins = [pin for pin in connections if pin['category'] == 'io'] 
        
        return {
            'all_pins': connections,
            'power_pins': power_pins,
            'ground_pins': ground_pins,
            'io_pins': io_pins
        }
    
    def _categorize_pin(self, description):
        """Categorize a pin based on its description"""
        desc_lower = description.lower()
        
        if any(term in desc_lower for term in ['vcc', 'vdd', 'power', 'supply', '+v']):
            return 'power'
        elif any(term in desc_lower for term in ['gnd', 'ground', 'vss', '-v']):
            return 'ground'
        elif any(term in desc_lower for term in ['i/o', 'gpio', 'input', 'output', 'data']):
            return 'io'
        else:
            return 'other'
    
    def process_datasheet(self, source):
        """Process a datasheet from either PDF file or text content"""
        try:
            # Check if source is a file or text content
            if os.path.isfile(source) and source.lower().endswith('.pdf'):
                text = self.extract_from_pdf(source)
            else:
                text = source  # Assume source is already text content
            
            # Check if we have text to process
            if not text.strip():
                logger.warning("No text content extracted or provided")
                return {
                    'parameters': {},
                    'connections': {'all_pins': []},
                    'success': False,
                    'error': 'No text content extracted'
                }
            
            parameters = self.extract_parameters(text)
            connections = self.detect_component_connections(text)
            
            return {
                'parameters': parameters,
                'connections': connections,
                'raw_text_sample': text[:200] + ('...' if len(text) > 200 else ''),
                'success': True
            }
        except Exception as e:
            logger.error(f"Error processing datasheet: {e}")
            return {
                'parameters': {},
                'connections': {'all_pins': []},
                'success': False,
                'error': str(e)
            }


# Example usage
if __name__ == "__main__":
    extractor = DatasheetExtractor()
    
    # Example with text content
    sample_text = """
    LM7805 Voltage Regulator
    
    Type: Voltage Regulator
    Part Number: LM7805
    Package: TO-220
    Pins: 3
    
    The LM7805 is a 5V voltage regulator with thermal overload protection.
    
    Electrical Characteristics:
    - Input Voltage: 7V to 35V
    - Output Voltage: 5V ± 0.25V
    - Maximum Output Current: 1.5A
    - Operating Temperature: 0°C to 125°C
    
    Pin Configuration:
    Pin 1: Input
    Pin 2: Ground
    Pin 3: Output (5V)
    """
    
    result = extractor.process_datasheet(sample_text)
    print("Extracted Parameters:", result['parameters'])
    print("Pin Connections:", result['connections']['all_pins'])
